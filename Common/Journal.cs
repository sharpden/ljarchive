//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EF.ljArchive.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Journal : DataSet {
        
        private OptionsDataTable tableOptions;
        
        private EventsDataTable tableEvents;
        
        private UserPicsDataTable tableUserPics;
        
        private MoodsDataTable tableMoods;
        
        private CommentsDataTable tableComments;
        
        private UsersDataTable tableUsers;
        
        public Journal() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Journal(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Options"] != null)) {
                    this.Tables.Add(new OptionsDataTable(ds.Tables["Options"]));
                }
                if ((ds.Tables["Events"] != null)) {
                    this.Tables.Add(new EventsDataTable(ds.Tables["Events"]));
                }
                if ((ds.Tables["UserPics"] != null)) {
                    this.Tables.Add(new UserPicsDataTable(ds.Tables["UserPics"]));
                }
                if ((ds.Tables["Moods"] != null)) {
                    this.Tables.Add(new MoodsDataTable(ds.Tables["Moods"]));
                }
                if ((ds.Tables["Comments"] != null)) {
                    this.Tables.Add(new CommentsDataTable(ds.Tables["Comments"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OptionsDataTable Options {
            get {
                return this.tableOptions;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        new public EventsDataTable Events {
            get {
                return this.tableEvents;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserPicsDataTable UserPics {
            get {
                return this.tableUserPics;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MoodsDataTable Moods {
            get {
                return this.tableMoods;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommentsDataTable Comments {
            get {
                return this.tableComments;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        public override DataSet Clone() {
            Journal cln = ((Journal)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Options"] != null)) {
                this.Tables.Add(new OptionsDataTable(ds.Tables["Options"]));
            }
            if ((ds.Tables["Events"] != null)) {
                this.Tables.Add(new EventsDataTable(ds.Tables["Events"]));
            }
            if ((ds.Tables["UserPics"] != null)) {
                this.Tables.Add(new UserPicsDataTable(ds.Tables["UserPics"]));
            }
            if ((ds.Tables["Moods"] != null)) {
                this.Tables.Add(new MoodsDataTable(ds.Tables["Moods"]));
            }
            if ((ds.Tables["Comments"] != null)) {
                this.Tables.Add(new CommentsDataTable(ds.Tables["Comments"]));
            }
            if ((ds.Tables["Users"] != null)) {
                this.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOptions = ((OptionsDataTable)(this.Tables["Options"]));
            if ((this.tableOptions != null)) {
                this.tableOptions.InitVars();
            }
            this.tableEvents = ((EventsDataTable)(this.Tables["Events"]));
            if ((this.tableEvents != null)) {
                this.tableEvents.InitVars();
            }
            this.tableUserPics = ((UserPicsDataTable)(this.Tables["UserPics"]));
            if ((this.tableUserPics != null)) {
                this.tableUserPics.InitVars();
            }
            this.tableMoods = ((MoodsDataTable)(this.Tables["Moods"]));
            if ((this.tableMoods != null)) {
                this.tableMoods.InitVars();
            }
            this.tableComments = ((CommentsDataTable)(this.Tables["Comments"]));
            if ((this.tableComments != null)) {
                this.tableComments.InitVars();
            }
            this.tableUsers = ((UsersDataTable)(this.Tables["Users"]));
            if ((this.tableUsers != null)) {
                this.tableUsers.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Journal";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Journal.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOptions = new OptionsDataTable();
            this.Tables.Add(this.tableOptions);
            this.tableEvents = new EventsDataTable();
            this.Tables.Add(this.tableEvents);
            this.tableUserPics = new UserPicsDataTable();
            this.Tables.Add(this.tableUserPics);
            this.tableMoods = new MoodsDataTable();
            this.Tables.Add(this.tableMoods);
            this.tableComments = new CommentsDataTable();
            this.Tables.Add(this.tableComments);
            this.tableUsers = new UsersDataTable();
            this.Tables.Add(this.tableUsers);
        }
        
        private bool ShouldSerializeOptions() {
            return false;
        }
        
        private bool ShouldSerializeEvents() {
            return false;
        }
        
        private bool ShouldSerializeUserPics() {
            return false;
        }
        
        private bool ShouldSerializeMoods() {
            return false;
        }
        
        private bool ShouldSerializeComments() {
            return false;
        }
        
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OptionsRowChangeEventHandler(object sender, OptionsRowChangeEvent e);
        
        public delegate void EventsRowChangeEventHandler(object sender, EventsRowChangeEvent e);
        
        public delegate void UserPicsRowChangeEventHandler(object sender, UserPicsRowChangeEvent e);
        
        public delegate void MoodsRowChangeEventHandler(object sender, MoodsRowChangeEvent e);
        
        public delegate void CommentsRowChangeEventHandler(object sender, CommentsRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnServerURL;
            
            private DataColumn columnDefaultPicURL;
            
            private DataColumn columnCommunityPicURL;
            
            private DataColumn columnFullName;
            
            private DataColumn columnUserName;
            
            private DataColumn columnHPassword;
            
            private DataColumn columnLastSync;
            
            private DataColumn columnGetComments;
            
            private DataColumn columnUseJournal;
            
            internal OptionsDataTable() : 
                    base("Options") {
                this.InitClass();
            }
            
            internal OptionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ServerURLColumn {
                get {
                    return this.columnServerURL;
                }
            }
            
            internal DataColumn DefaultPicURLColumn {
                get {
                    return this.columnDefaultPicURL;
                }
            }
            
            internal DataColumn CommunityPicURLColumn {
                get {
                    return this.columnCommunityPicURL;
                }
            }
            
            internal DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            internal DataColumn HPasswordColumn {
                get {
                    return this.columnHPassword;
                }
            }
            
            internal DataColumn LastSyncColumn {
                get {
                    return this.columnLastSync;
                }
            }
            
            internal DataColumn GetCommentsColumn {
                get {
                    return this.columnGetComments;
                }
            }
            
            internal DataColumn UseJournalColumn {
                get {
                    return this.columnUseJournal;
                }
            }
            
            public OptionsRow this[int index] {
                get {
                    return ((OptionsRow)(this.Rows[index]));
                }
            }
            
            public event OptionsRowChangeEventHandler OptionsRowChanged;
            
            public event OptionsRowChangeEventHandler OptionsRowChanging;
            
            public event OptionsRowChangeEventHandler OptionsRowDeleted;
            
            public event OptionsRowChangeEventHandler OptionsRowDeleting;
            
            public void AddOptionsRow(OptionsRow row) {
                this.Rows.Add(row);
            }
            
            public OptionsRow AddOptionsRow(string ServerURL, string DefaultPicURL, string CommunityPicURL, string FullName, string UserName, string HPassword, System.DateTime LastSync, bool GetComments, string UseJournal) {
                OptionsRow rowOptionsRow = ((OptionsRow)(this.NewRow()));
                rowOptionsRow.ItemArray = new object[] {
                        ServerURL,
                        DefaultPicURL,
                        CommunityPicURL,
                        FullName,
                        UserName,
                        HPassword,
                        LastSync,
                        GetComments,
                        UseJournal};
                this.Rows.Add(rowOptionsRow);
                return rowOptionsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OptionsDataTable cln = ((OptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OptionsDataTable();
            }
            
            internal void InitVars() {
                this.columnServerURL = this.Columns["ServerURL"];
                this.columnDefaultPicURL = this.Columns["DefaultPicURL"];
                this.columnCommunityPicURL = this.Columns["CommunityPicURL"];
                this.columnFullName = this.Columns["FullName"];
                this.columnUserName = this.Columns["UserName"];
                this.columnHPassword = this.Columns["HPassword"];
                this.columnLastSync = this.Columns["LastSync"];
                this.columnGetComments = this.Columns["GetComments"];
                this.columnUseJournal = this.Columns["UseJournal"];
            }
            
            private void InitClass() {
                this.columnServerURL = new DataColumn("ServerURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServerURL);
                this.columnDefaultPicURL = new DataColumn("DefaultPicURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefaultPicURL);
                this.columnCommunityPicURL = new DataColumn("CommunityPicURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommunityPicURL);
                this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFullName);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.columnHPassword = new DataColumn("HPassword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHPassword);
                this.columnLastSync = new DataColumn("LastSync", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastSync);
                this.columnGetComments = new DataColumn("GetComments", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGetComments);
                this.columnUseJournal = new DataColumn("UseJournal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseJournal);
            }
            
            public OptionsRow NewOptionsRow() {
                return ((OptionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OptionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OptionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OptionsRowChanged != null)) {
                    this.OptionsRowChanged(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OptionsRowChanging != null)) {
                    this.OptionsRowChanging(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OptionsRowDeleted != null)) {
                    this.OptionsRowDeleted(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OptionsRowDeleting != null)) {
                    this.OptionsRowDeleting(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOptionsRow(OptionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsRow : DataRow {
            
            private OptionsDataTable tableOptions;
            
            internal OptionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOptions = ((OptionsDataTable)(this.Table));
            }
            
            public string ServerURL {
                get {
                    try {
                        return ((string)(this[this.tableOptions.ServerURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.ServerURLColumn] = value;
                }
            }
            
            public string DefaultPicURL {
                get {
                    try {
                        return ((string)(this[this.tableOptions.DefaultPicURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.DefaultPicURLColumn] = value;
                }
            }

            public string CommunityPicURL {
                get {
                    try {
                        return ((string)(this[this.tableOptions.CommunityPicURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.CommunityPicURLColumn] = value;
                }
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableOptions.FullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.FullNameColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableOptions.UserNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.UserNameColumn] = value;
                }
            }
            
            public string HPassword {
                get {
                    try {
                        return ((string)(this[this.tableOptions.HPasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.HPasswordColumn] = value;
                }
            }
            
            public System.DateTime LastSync {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOptions.LastSyncColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.LastSyncColumn] = value;
                }
            }
            
            public bool GetComments {
                get {
                    try {
                        return ((bool)(this[this.tableOptions.GetCommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.GetCommentsColumn] = value;
                }
            }
            
            public string UseJournal {
                get {
                    try {
                        return ((string)(this[this.tableOptions.UseJournalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.UseJournalColumn] = value;
                }
            }
            
            public bool IsServerURLNull() {
                return this.IsNull(this.tableOptions.ServerURLColumn);
            }
            
            public void SetServerURLNull() {
                this[this.tableOptions.ServerURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsDefaultPicURLNull() {
                return this.IsNull(this.tableOptions.DefaultPicURLColumn);
            }
            
            public void SetDefaultPicURLNull() {
                this[this.tableOptions.DefaultPicURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommunityPicURLNull() {
                return this.IsNull(this.tableOptions.CommunityPicURLColumn);
            }
            
            public void SetCommunityPicURLNull() {
                this[this.tableOptions.CommunityPicURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tableOptions.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tableOptions.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserNameNull() {
                return this.IsNull(this.tableOptions.UserNameColumn);
            }
            
            public void SetUserNameNull() {
                this[this.tableOptions.UserNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsHPasswordNull() {
                return this.IsNull(this.tableOptions.HPasswordColumn);
            }
            
            public void SetHPasswordNull() {
                this[this.tableOptions.HPasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastSyncNull() {
                return this.IsNull(this.tableOptions.LastSyncColumn);
            }
            
            public void SetLastSyncNull() {
                this[this.tableOptions.LastSyncColumn] = System.Convert.DBNull;
            }
            
            public bool IsGetCommentsNull() {
                return this.IsNull(this.tableOptions.GetCommentsColumn);
            }
            
            public void SetGetCommentsNull() {
                this[this.tableOptions.GetCommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseJournalNull() {
                return this.IsNull(this.tableOptions.UseJournalColumn);
            }
            
            public void SetUseJournalNull() {
                this[this.tableOptions.UseJournalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsRowChangeEvent : EventArgs {
            
            private OptionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public OptionsRowChangeEvent(OptionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EventsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnDate;
            
            private DataColumn columnSecurity;
            
            private DataColumn columnAllowMask;
            
            private DataColumn columnSubject;
            
            private DataColumn columnBody;
            
            private DataColumn columnPoster;
            
            private DataColumn columnAnum;
            
            private DataColumn columnCurrentMood;
            
            private DataColumn columnCurrentMoodID;
            
            private DataColumn columnCurrentMusic;
            
            private DataColumn columnPreformatted;
            
            private DataColumn columnNoComments;
            
            private DataColumn columnPictureKeyword;
            
            private DataColumn columnBackdated;
            
            private DataColumn columnNoEmail;
            
            private DataColumn columnUnknown8Bit;
            
            private DataColumn columnScreenedComments;
            
            private DataColumn columnNumberOfRevisions;
            
            private DataColumn columnCommentAlter;
            
            private DataColumn columnSyndicationURL;
            
            private DataColumn columnSyndicationID;
            
            private DataColumn columnLastRevision;
            
            private DataColumn columnTagList;
            
            internal EventsDataTable() : 
                    base("Events") {
                this.InitClass();
            }
            
            internal EventsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            internal DataColumn SecurityColumn {
                get {
                    return this.columnSecurity;
                }
            }
            
            internal DataColumn AllowMaskColumn {
                get {
                    return this.columnAllowMask;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            internal DataColumn PosterColumn {
                get {
                    return this.columnPoster;
                }
            }

            internal DataColumn AnumColumn {
                get {
                    return this.columnAnum;
                }
            }
            
            internal DataColumn CurrentMoodColumn {
                get {
                    return this.columnCurrentMood;
                }
            }
            
            internal DataColumn CurrentMoodIDColumn {
                get {
                    return this.columnCurrentMoodID;
                }
            }
            
            internal DataColumn CurrentMusicColumn {
                get {
                    return this.columnCurrentMusic;
                }
            }
            
            internal DataColumn PreformattedColumn {
                get {
                    return this.columnPreformatted;
                }
            }
            
            internal DataColumn NoCommentsColumn {
                get {
                    return this.columnNoComments;
                }
            }
            
            internal DataColumn PictureKeywordColumn {
                get {
                    return this.columnPictureKeyword;
                }
            }
            
            internal DataColumn BackdatedColumn {
                get {
                    return this.columnBackdated;
                }
            }
            
            internal DataColumn NoEmailColumn {
                get {
                    return this.columnNoEmail;
                }
            }
            
            internal DataColumn Unknown8BitColumn {
                get {
                    return this.columnUnknown8Bit;
                }
            }
            
            internal DataColumn ScreenedCommentsColumn {
                get {
                    return this.columnScreenedComments;
                }
            }
            
            internal DataColumn NumberOfRevisionsColumn {
                get {
                    return this.columnNumberOfRevisions;
                }
            }
            
            internal DataColumn CommentAlterColumn {
                get {
                    return this.columnCommentAlter;
                }
            }
            
            internal DataColumn SyndicationURLColumn {
                get {
                    return this.columnSyndicationURL;
                }
            }
            
            internal DataColumn SyndicationIDColumn {
                get {
                    return this.columnSyndicationID;
                }
            }
            
            internal DataColumn LastRevisionColumn {
                get {
                    return this.columnLastRevision;
                }
            }
            
            internal DataColumn TagListColumn {
                get {
                    return this.columnTagList;
                }
            }
            
            public EventsRow this[int index] {
                get {
                    return ((EventsRow)(this.Rows[index]));
                }
            }
            
            public event EventsRowChangeEventHandler EventsRowChanged;
            
            public event EventsRowChangeEventHandler EventsRowChanging;
            
            public event EventsRowChangeEventHandler EventsRowDeleted;
            
            public event EventsRowChangeEventHandler EventsRowDeleting;
            
            public void AddEventsRow(EventsRow row) {
                this.Rows.Add(row);
            }
            
            public EventsRow AddEventsRow(
                        int ID, 
                        System.DateTime Date, 
                        string Security, 
                        int AllowMask, 
                        string Subject, 
                        string Body, 
                        string Poster, 
                        int Anum,
                        string CurrentMood, 
                        int CurrentMoodID, 
                        string CurrentMusic, 
                        bool Preformatted, 
                        bool NoComments, 
                        string PictureKeyword, 
                        bool Backdated, 
                        bool NoEmail, 
                        bool Unknown8Bit, 
                        bool ScreenedComments, 
                        int NumberOfRevisions, 
                        int CommentAlter, 
                        string SyndicationURL, 
                        string SyndicationID, 
                        System.DateTime LastRevision, 
                        string TagList) {
                EventsRow rowEventsRow = ((EventsRow)(this.NewRow()));
                rowEventsRow.ItemArray = new object[] {
                        ID,
                        Date,
                        Security,
                        AllowMask,
                        Subject,
                        Body,
                        Poster,
                        Anum,
                        CurrentMood,
                        CurrentMoodID,
                        CurrentMusic,
                        Preformatted,
                        NoComments,
                        PictureKeyword,
                        Backdated,
                        NoEmail,
                        Unknown8Bit,
                        ScreenedComments,
                        NumberOfRevisions,
                        CommentAlter,
                        SyndicationURL,
                        SyndicationID,
                        LastRevision,
                        TagList};
                this.Rows.Add(rowEventsRow);
                return rowEventsRow;
            }
            
            public EventsRow FindByID(int ID) {
                return ((EventsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EventsDataTable cln = ((EventsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EventsDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnDate = this.Columns["Date"];
                this.columnSecurity = this.Columns["Security"];
                this.columnAllowMask = this.Columns["AllowMask"];
                this.columnSubject = this.Columns["Subject"];
                this.columnBody = this.Columns["Body"];
                this.columnPoster = this.Columns["Poster"];
                this.columnAnum = this.Columns["Anum"];
                this.columnCurrentMood = this.Columns["CurrentMood"];
                this.columnCurrentMoodID = this.Columns["CurrentMoodID"];
                this.columnCurrentMusic = this.Columns["CurrentMusic"];
                this.columnPreformatted = this.Columns["Preformatted"];
                this.columnNoComments = this.Columns["NoComments"];
                this.columnPictureKeyword = this.Columns["PictureKeyword"];
                this.columnBackdated = this.Columns["Backdated"];
                this.columnNoEmail = this.Columns["NoEmail"];
                this.columnUnknown8Bit = this.Columns["Unknown8Bit"];
                this.columnScreenedComments = this.Columns["ScreenedComments"];
                this.columnNumberOfRevisions = this.Columns["NumberOfRevisions"];
                this.columnCommentAlter = this.Columns["CommentAlter"];
                this.columnSyndicationURL = this.Columns["SyndicationURL"];
                this.columnSyndicationID = this.Columns["SyndicationID"];
                this.columnLastRevision = this.Columns["LastRevision"];
                this.columnTagList = this.Columns["TagList"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnDate = new DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.columnSecurity = new DataColumn("Security", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurity);
                this.columnAllowMask = new DataColumn("AllowMask", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllowMask);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnBody = new DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBody);
                this.columnPoster = new DataColumn("Poster", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPoster);
                this.columnAnum = new DataColumn("Anum", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAnum);
                this.columnCurrentMood = new DataColumn("CurrentMood", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentMood);
                this.columnCurrentMoodID = new DataColumn("CurrentMoodID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentMoodID);
                this.columnCurrentMusic = new DataColumn("CurrentMusic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentMusic);
                this.columnPreformatted = new DataColumn("Preformatted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreformatted);
                this.columnNoComments = new DataColumn("NoComments", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoComments);
                this.columnPictureKeyword = new DataColumn("PictureKeyword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPictureKeyword);
                this.columnBackdated = new DataColumn("Backdated", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBackdated);
                this.columnNoEmail = new DataColumn("NoEmail", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNoEmail);
                this.columnUnknown8Bit = new DataColumn("Unknown8Bit", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnknown8Bit);
                this.columnScreenedComments = new DataColumn("ScreenedComments", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScreenedComments);
                this.columnNumberOfRevisions = new DataColumn("NumberOfRevisions", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNumberOfRevisions);
                this.columnCommentAlter = new DataColumn("CommentAlter", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommentAlter);
                this.columnSyndicationURL = new DataColumn("SyndicationURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSyndicationURL);
                this.columnSyndicationID = new DataColumn("SyndicationID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSyndicationID);
                this.columnLastRevision = new DataColumn("LastRevision", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastRevision);
                this.columnTagList = new DataColumn("TagList", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTagList);
                this.Constraints.Add(new UniqueConstraint("PK_Events", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public EventsRow NewEventsRow() {
                return ((EventsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EventsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EventsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventsRowChanged != null)) {
                    this.EventsRowChanged(this, new EventsRowChangeEvent(((EventsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventsRowChanging != null)) {
                    this.EventsRowChanging(this, new EventsRowChangeEvent(((EventsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventsRowDeleted != null)) {
                    this.EventsRowDeleted(this, new EventsRowChangeEvent(((EventsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventsRowDeleting != null)) {
                    this.EventsRowDeleting(this, new EventsRowChangeEvent(((EventsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEventsRow(EventsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EventsRow : DataRow {
            
            private EventsDataTable tableEvents;
            
            internal EventsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvents = ((EventsDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableEvents.IDColumn]));
                }
                set {
                    this[this.tableEvents.IDColumn] = value;
                }
            }
            
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEvents.DateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.DateColumn] = value;
                }
            }
            
            public string Security {
                get {
                    try {
                        return ((string)(this[this.tableEvents.SecurityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.SecurityColumn] = value;
                }
            }
            
            public int AllowMask {
                get {
                    try {
                        return ((int)(this[this.tableEvents.AllowMaskColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.AllowMaskColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableEvents.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.SubjectColumn] = value;
                }
            }
            
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableEvents.BodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.BodyColumn] = value;
                }
            }
            
            public string Poster {
                get {
                    try {
                        return ((string)(this[this.tableEvents.PosterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.PosterColumn] = value;
                }
            }
            
            public int Anum {
                get {
                    try {
                        return ((int)(this[this.tableEvents.AnumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.AnumColumn] = value;
                }
            }
            
            public string CurrentMood {
                get {
                    try {
                        return ((string)(this[this.tableEvents.CurrentMoodColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.CurrentMoodColumn] = value;
                }
            }
            
            public int CurrentMoodID {
                get {
                    try {
                        return ((int)(this[this.tableEvents.CurrentMoodIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.CurrentMoodIDColumn] = value;
                }
            }
            
            public string CurrentMusic {
                get {
                    try {
                        return ((string)(this[this.tableEvents.CurrentMusicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.CurrentMusicColumn] = value;
                }
            }
            
            public bool Preformatted {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.PreformattedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.PreformattedColumn] = value;
                }
            }
            
            public bool NoComments {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.NoCommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.NoCommentsColumn] = value;
                }
            }
            
            public string PictureKeyword {
                get {
                    try {
                        return ((string)(this[this.tableEvents.PictureKeywordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.PictureKeywordColumn] = value;
                }
            }
            
            public bool Backdated {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.BackdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.BackdatedColumn] = value;
                }
            }
            
            public bool NoEmail {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.NoEmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.NoEmailColumn] = value;
                }
            }
            
            public bool Unknown8Bit {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.Unknown8BitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.Unknown8BitColumn] = value;
                }
            }
            
            public bool ScreenedComments {
                get {
                    try {
                        return ((bool)(this[this.tableEvents.ScreenedCommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.ScreenedCommentsColumn] = value;
                }
            }
            
            public int NumberOfRevisions {
                get {
                    try {
                        return ((int)(this[this.tableEvents.NumberOfRevisionsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.NumberOfRevisionsColumn] = value;
                }
            }
            
            public int CommentAlter {
                get {
                    try {
                        return ((int)(this[this.tableEvents.CommentAlterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.CommentAlterColumn] = value;
                }
            }
            
            public string SyndicationURL {
                get {
                    try {
                        return ((string)(this[this.tableEvents.SyndicationURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.SyndicationURLColumn] = value;
                }
            }
            
            public string SyndicationID {
                get {
                    try {
                        return ((string)(this[this.tableEvents.SyndicationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.SyndicationIDColumn] = value;
                }
            }
            
            public System.DateTime LastRevision {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEvents.LastRevisionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.LastRevisionColumn] = value;
                }
            }
            
            public string TagList {
                get {
                    try {
                        return ((string)(this[this.tableEvents.TagListColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvents.TagListColumn] = value;
                }
            }
            
            public bool IsDateNull() {
                return this.IsNull(this.tableEvents.DateColumn);
            }
            
            public void SetDateNull() {
                this[this.tableEvents.DateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecurityNull() {
                return this.IsNull(this.tableEvents.SecurityColumn);
            }
            
            public void SetSecurityNull() {
                this[this.tableEvents.SecurityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowMaskNull() {
                return this.IsNull(this.tableEvents.AllowMaskColumn);
            }
            
            public void SetAllowMaskNull() {
                this[this.tableEvents.AllowMaskColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableEvents.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableEvents.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsBodyNull() {
                return this.IsNull(this.tableEvents.BodyColumn);
            }
            
            public void SetBodyNull() {
                this[this.tableEvents.BodyColumn] = System.Convert.DBNull;
            }
            
            public bool IsPosterNull() {
                return this.IsNull(this.tableEvents.PosterColumn);
            }
            
            public void SetPosterNull() {
                this[this.tableEvents.PosterColumn] = System.Convert.DBNull;
            }
            
            public bool IsAnumNull() {
                return this.IsNull(this.tableEvents.AnumColumn);
            }
            
            public void SetAnumNull() {
                this[this.tableEvents.AnumColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentMoodNull() {
                return this.IsNull(this.tableEvents.CurrentMoodColumn);
            }
            
            public void SetCurrentMoodNull() {
                this[this.tableEvents.CurrentMoodColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentMoodIDNull() {
                return this.IsNull(this.tableEvents.CurrentMoodIDColumn);
            }
            
            public void SetCurrentMoodIDNull() {
                this[this.tableEvents.CurrentMoodIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentMusicNull() {
                return this.IsNull(this.tableEvents.CurrentMusicColumn);
            }
            
            public void SetCurrentMusicNull() {
                this[this.tableEvents.CurrentMusicColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreformattedNull() {
                return this.IsNull(this.tableEvents.PreformattedColumn);
            }
            
            public void SetPreformattedNull() {
                this[this.tableEvents.PreformattedColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoCommentsNull() {
                return this.IsNull(this.tableEvents.NoCommentsColumn);
            }
            
            public void SetNoCommentsNull() {
                this[this.tableEvents.NoCommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureKeywordNull() {
                return this.IsNull(this.tableEvents.PictureKeywordColumn);
            }
            
            public void SetPictureKeywordNull() {
                this[this.tableEvents.PictureKeywordColumn] = System.Convert.DBNull;
            }
            
            public bool IsBackdatedNull() {
                return this.IsNull(this.tableEvents.BackdatedColumn);
            }
            
            public void SetBackdatedNull() {
                this[this.tableEvents.BackdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoEmailNull() {
                return this.IsNull(this.tableEvents.NoEmailColumn);
            }
            
            public void SetNoEmailNull() {
                this[this.tableEvents.NoEmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnknown8BitNull() {
                return this.IsNull(this.tableEvents.Unknown8BitColumn);
            }
            
            public void SetUnknown8BitNull() {
                this[this.tableEvents.Unknown8BitColumn] = System.Convert.DBNull;
            }
            
            public bool IsScreenedCommentsNull() {
                return this.IsNull(this.tableEvents.ScreenedCommentsColumn);
            }
            
            public void SetScreenedCommentsNull() {
                this[this.tableEvents.ScreenedCommentsColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberOfRevisionsNull() {
                return this.IsNull(this.tableEvents.NumberOfRevisionsColumn);
            }
            
            public void SetNumberOfRevisionsNull() {
                this[this.tableEvents.NumberOfRevisionsColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentAlterNull() {
                return this.IsNull(this.tableEvents.CommentAlterColumn);
            }
            
            public void SetCommentAlterNull() {
                this[this.tableEvents.CommentAlterColumn] = System.Convert.DBNull;
            }
            
            public bool IsSyndicationURLNull() {
                return this.IsNull(this.tableEvents.SyndicationURLColumn);
            }
            
            public void SetSyndicationURLNull() {
                this[this.tableEvents.SyndicationURLColumn] = System.Convert.DBNull;
            }
            
            public bool IsSyndicationIDNull() {
                return this.IsNull(this.tableEvents.SyndicationIDColumn);
            }
            
            public void SetSyndicationIDNull() {
                this[this.tableEvents.SyndicationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastRevisionNull() {
                return this.IsNull(this.tableEvents.LastRevisionColumn);
            }
            
            public void SetLastRevisionNull() {
                this[this.tableEvents.LastRevisionColumn] = System.Convert.DBNull;
            }
            
            public bool IsTagListNull() {
                return this.IsNull(this.tableEvents.TagListColumn);
            }
            
            public void SetTagListNull() {
                this[this.tableEvents.TagListColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EventsRowChangeEvent : EventArgs {
            
            private EventsRow eventRow;
            
            private DataRowAction eventAction;
            
            public EventsRowChangeEvent(EventsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EventsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserPicsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPicKeyword;
            
            private DataColumn columnPicURL;
            
            internal UserPicsDataTable() : 
                    base("UserPics") {
                this.InitClass();
            }
            
            internal UserPicsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PicKeywordColumn {
                get {
                    return this.columnPicKeyword;
                }
            }
            
            internal DataColumn PicURLColumn {
                get {
                    return this.columnPicURL;
                }
            }
            
            public UserPicsRow this[int index] {
                get {
                    return ((UserPicsRow)(this.Rows[index]));
                }
            }
            
            public event UserPicsRowChangeEventHandler UserPicsRowChanged;
            
            public event UserPicsRowChangeEventHandler UserPicsRowChanging;
            
            public event UserPicsRowChangeEventHandler UserPicsRowDeleted;
            
            public event UserPicsRowChangeEventHandler UserPicsRowDeleting;
            
            public void AddUserPicsRow(UserPicsRow row) {
                this.Rows.Add(row);
            }
            
            public UserPicsRow AddUserPicsRow(string PicKeyword, string PicURL) {
                UserPicsRow rowUserPicsRow = ((UserPicsRow)(this.NewRow()));
                rowUserPicsRow.ItemArray = new object[] {
                        PicKeyword,
                        PicURL};
                this.Rows.Add(rowUserPicsRow);
                return rowUserPicsRow;
            }
            
            public UserPicsRow FindByPicKeyword(string PicKeyword) {
                return ((UserPicsRow)(this.Rows.Find(new object[] {
                            PicKeyword})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserPicsDataTable cln = ((UserPicsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserPicsDataTable();
            }
            
            internal void InitVars() {
                this.columnPicKeyword = this.Columns["PicKeyword"];
                this.columnPicURL = this.Columns["PicURL"];
            }
            
            private void InitClass() {
                this.columnPicKeyword = new DataColumn("PicKeyword", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPicKeyword);
                this.columnPicURL = new DataColumn("PicURL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPicURL);
                this.Constraints.Add(new UniqueConstraint("PK_UserPics", new DataColumn[] {
                                this.columnPicKeyword}, true));
                this.columnPicKeyword.AllowDBNull = false;
                this.columnPicKeyword.Unique = true;
            }
            
            public UserPicsRow NewUserPicsRow() {
                return ((UserPicsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserPicsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserPicsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserPicsRowChanged != null)) {
                    this.UserPicsRowChanged(this, new UserPicsRowChangeEvent(((UserPicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserPicsRowChanging != null)) {
                    this.UserPicsRowChanging(this, new UserPicsRowChangeEvent(((UserPicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserPicsRowDeleted != null)) {
                    this.UserPicsRowDeleted(this, new UserPicsRowChangeEvent(((UserPicsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserPicsRowDeleting != null)) {
                    this.UserPicsRowDeleting(this, new UserPicsRowChangeEvent(((UserPicsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserPicsRow(UserPicsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserPicsRow : DataRow {
            
            private UserPicsDataTable tableUserPics;
            
            internal UserPicsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserPics = ((UserPicsDataTable)(this.Table));
            }
            
            public string PicKeyword {
                get {
                    return ((string)(this[this.tableUserPics.PicKeywordColumn]));
                }
                set {
                    this[this.tableUserPics.PicKeywordColumn] = value;
                }
            }
            
            public string PicURL {
                get {
                    try {
                        return ((string)(this[this.tableUserPics.PicURLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserPics.PicURLColumn] = value;
                }
            }
            
            public bool IsPicURLNull() {
                return this.IsNull(this.tableUserPics.PicURLColumn);
            }
            
            public void SetPicURLNull() {
                this[this.tableUserPics.PicURLColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserPicsRowChangeEvent : EventArgs {
            
            private UserPicsRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserPicsRowChangeEvent(UserPicsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserPicsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MoodsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnName;
            
            private DataColumn columnParent;
            
            internal MoodsDataTable() : 
                    base("Moods") {
                this.InitClass();
            }
            
            internal MoodsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ParentColumn {
                get {
                    return this.columnParent;
                }
            }
            
            public MoodsRow this[int index] {
                get {
                    return ((MoodsRow)(this.Rows[index]));
                }
            }
            
            public event MoodsRowChangeEventHandler MoodsRowChanged;
            
            public event MoodsRowChangeEventHandler MoodsRowChanging;
            
            public event MoodsRowChangeEventHandler MoodsRowDeleted;
            
            public event MoodsRowChangeEventHandler MoodsRowDeleting;
            
            public void AddMoodsRow(MoodsRow row) {
                this.Rows.Add(row);
            }
            
            public MoodsRow AddMoodsRow(int ID, string Name, int Parent) {
                MoodsRow rowMoodsRow = ((MoodsRow)(this.NewRow()));
                rowMoodsRow.ItemArray = new object[] {
                        ID,
                        Name,
                        Parent};
                this.Rows.Add(rowMoodsRow);
                return rowMoodsRow;
            }
            
            public MoodsRow FindByID(int ID) {
                return ((MoodsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MoodsDataTable cln = ((MoodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MoodsDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnName = this.Columns["Name"];
                this.columnParent = this.Columns["Parent"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnParent = new DataColumn("Parent", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParent);
                this.Constraints.Add(new UniqueConstraint("PK_Moods", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public MoodsRow NewMoodsRow() {
                return ((MoodsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MoodsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MoodsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MoodsRowChanged != null)) {
                    this.MoodsRowChanged(this, new MoodsRowChangeEvent(((MoodsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MoodsRowChanging != null)) {
                    this.MoodsRowChanging(this, new MoodsRowChangeEvent(((MoodsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MoodsRowDeleted != null)) {
                    this.MoodsRowDeleted(this, new MoodsRowChangeEvent(((MoodsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MoodsRowDeleting != null)) {
                    this.MoodsRowDeleting(this, new MoodsRowChangeEvent(((MoodsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMoodsRow(MoodsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MoodsRow : DataRow {
            
            private MoodsDataTable tableMoods;
            
            internal MoodsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMoods = ((MoodsDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableMoods.IDColumn]));
                }
                set {
                    this[this.tableMoods.IDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMoods.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMoods.NameColumn] = value;
                }
            }
            
            public int Parent {
                get {
                    try {
                        return ((int)(this[this.tableMoods.ParentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMoods.ParentColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableMoods.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableMoods.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentNull() {
                return this.IsNull(this.tableMoods.ParentColumn);
            }
            
            public void SetParentNull() {
                this[this.tableMoods.ParentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MoodsRowChangeEvent : EventArgs {
            
            private MoodsRow eventRow;
            
            private DataRowAction eventAction;
            
            public MoodsRowChangeEvent(MoodsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MoodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnPosterID;
            
            private DataColumn columnState;
            
            private DataColumn columnJItemID;
            
            private DataColumn columnParentID;
            
            private DataColumn columnBody;
            
            private DataColumn columnSubject;
            
            private DataColumn columnDate;
            
            internal CommentsDataTable() : 
                    base("Comments") {
                this.InitClass();
            }
            
            internal CommentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn PosterIDColumn {
                get {
                    return this.columnPosterID;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn JItemIDColumn {
                get {
                    return this.columnJItemID;
                }
            }
            
            internal DataColumn ParentIDColumn {
                get {
                    return this.columnParentID;
                }
            }
            
            internal DataColumn BodyColumn {
                get {
                    return this.columnBody;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            public CommentsRow this[int index] {
                get {
                    return ((CommentsRow)(this.Rows[index]));
                }
            }
            
            public event CommentsRowChangeEventHandler CommentsRowChanged;
            
            public event CommentsRowChangeEventHandler CommentsRowChanging;
            
            public event CommentsRowChangeEventHandler CommentsRowDeleted;
            
            public event CommentsRowChangeEventHandler CommentsRowDeleting;
            
            public void AddCommentsRow(CommentsRow row) {
                this.Rows.Add(row);
            }
            
            public CommentsRow AddCommentsRow(int ID, int PosterID, string State, int JItemID, int ParentID, string Body, string Subject, System.DateTime Date) {
                CommentsRow rowCommentsRow = ((CommentsRow)(this.NewRow()));
                rowCommentsRow.ItemArray = new object[] {
                        ID,
                        PosterID,
                        State,
                        JItemID,
                        ParentID,
                        Body,
                        Subject,
                        Date};
                this.Rows.Add(rowCommentsRow);
                return rowCommentsRow;
            }
            
            public CommentsRow FindByID(int ID) {
                return ((CommentsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CommentsDataTable cln = ((CommentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CommentsDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnPosterID = this.Columns["PosterID"];
                this.columnState = this.Columns["State"];
                this.columnJItemID = this.Columns["JItemID"];
                this.columnParentID = this.Columns["ParentID"];
                this.columnBody = this.Columns["Body"];
                this.columnSubject = this.Columns["Subject"];
                this.columnDate = this.Columns["Date"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnPosterID = new DataColumn("PosterID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPosterID);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnJItemID = new DataColumn("JItemID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnJItemID);
                this.columnParentID = new DataColumn("ParentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentID);
                this.columnBody = new DataColumn("Body", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBody);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnDate = new DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.Constraints.Add(new UniqueConstraint("PK_Comments", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public CommentsRow NewCommentsRow() {
                return ((CommentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CommentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CommentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CommentsRowChanged != null)) {
                    this.CommentsRowChanged(this, new CommentsRowChangeEvent(((CommentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CommentsRowChanging != null)) {
                    this.CommentsRowChanging(this, new CommentsRowChangeEvent(((CommentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CommentsRowDeleted != null)) {
                    this.CommentsRowDeleted(this, new CommentsRowChangeEvent(((CommentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CommentsRowDeleting != null)) {
                    this.CommentsRowDeleting(this, new CommentsRowChangeEvent(((CommentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCommentsRow(CommentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommentsRow : DataRow {
            
            private CommentsDataTable tableComments;
            
            internal CommentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableComments = ((CommentsDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableComments.IDColumn]));
                }
                set {
                    this[this.tableComments.IDColumn] = value;
                }
            }
            
            public int PosterID {
                get {
                    try {
                        return ((int)(this[this.tableComments.PosterIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.PosterIDColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableComments.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.StateColumn] = value;
                }
            }
            
            public int JItemID {
                get {
                    try {
                        return ((int)(this[this.tableComments.JItemIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.JItemIDColumn] = value;
                }
            }
            
            public int ParentID {
                get {
                    try {
                        return ((int)(this[this.tableComments.ParentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.ParentIDColumn] = value;
                }
            }
            
            public string Body {
                get {
                    try {
                        return ((string)(this[this.tableComments.BodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.BodyColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableComments.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.SubjectColumn] = value;
                }
            }
            
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableComments.DateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComments.DateColumn] = value;
                }
            }
            
            public bool IsPosterIDNull() {
                return this.IsNull(this.tableComments.PosterIDColumn);
            }
            
            public void SetPosterIDNull() {
                this[this.tableComments.PosterIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableComments.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableComments.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsJItemIDNull() {
                return this.IsNull(this.tableComments.JItemIDColumn);
            }
            
            public void SetJItemIDNull() {
                this[this.tableComments.JItemIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentIDNull() {
                return this.IsNull(this.tableComments.ParentIDColumn);
            }
            
            public void SetParentIDNull() {
                this[this.tableComments.ParentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsBodyNull() {
                return this.IsNull(this.tableComments.BodyColumn);
            }
            
            public void SetBodyNull() {
                this[this.tableComments.BodyColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableComments.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableComments.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateNull() {
                return this.IsNull(this.tableComments.DateColumn);
            }
            
            public void SetDateNull() {
                this[this.tableComments.DateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommentsRowChangeEvent : EventArgs {
            
            private CommentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CommentsRowChangeEvent(CommentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CommentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnUser;
            
            internal UsersDataTable() : 
                    base("Users") {
                this.InitClass();
            }
            
            internal UsersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn UserColumn {
                get {
                    return this.columnUser;
                }
            }
            
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            public UsersRow AddUsersRow(int ID, string User) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        ID,
                        User};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            public UsersRow FindByID(int ID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnUser = this.Columns["User"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnUser = new DataColumn("User", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUser);
                this.Constraints.Add(new UniqueConstraint("PK_Users", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRow : DataRow {
            
            private UsersDataTable tableUsers;
            
            internal UsersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableUsers.IDColumn]));
                }
                set {
                    this[this.tableUsers.IDColumn] = value;
                }
            }
            
            public string User {
                get {
                    try {
                        return ((string)(this[this.tableUsers.UserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.UserColumn] = value;
                }
            }
            
            public bool IsUserNull() {
                return this.IsNull(this.tableUsers.UserColumn);
            }
            
            public void SetUserNull() {
                this[this.tableUsers.UserColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersRowChangeEvent : EventArgs {
            
            private UsersRow eventRow;
            
            private DataRowAction eventAction;
            
            public UsersRowChangeEvent(UsersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
